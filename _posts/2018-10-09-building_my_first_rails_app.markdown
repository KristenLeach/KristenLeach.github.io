---
layout: post
title:      "Building my first Rails App"
date:       2018-10-09 18:47:18 +0000
permalink:  building_my_first_rails_app
---

When I come up with app ideas for my portfolio, my main concern personally is whether or not the app is functional in real life. I get the allure of building cool conceptual apps (and I envy them!), but when I brainstorm I try to think of what I actually NEED in an app. As a mom, most of the time my ideas revolve around making my day-to-day easier; like organizing or automating tasks that would otherwise take up precious time. One thing I really derive no pleasure from is meal planning. I love to cook but planning meals takes me forever (I’m so indecisive); and then building a grocery list after spending all that time browsing recipes feels like a punishment. I’ve always wanted an app that will let me browse recipes, select the ones I want for the week, and then builds my grocery list for me based off of my selection. So, I made one!

Recipes to Groceries is an app built using Ruby on Rails. As part of the requirements include allowing for third party signin and I have a somewhat frustrating history with OmniAuth, it was recommended to me that I set it up first. This was helpful in some ways since I could get the bulk of the steps out of the way (adding the routes, ENV key & secret, etc.), but I just had to set it and forget it while I set everything else up as I had no way of testing the functionality at that point.

My next step was setting up the basic functionality. I knew I wanted users to be able to upload recipes, so those were the first two models I built; a user could have many recipes and a recipe belonged to a user. This worked fine as is, but in order to have my app functioning as I wanted I needed a join table. The join table, meals, would allow a user to add any recipe in the database to their meal plan. However, this left me with several issues; the most important one being that with a regular has_many_through relationship, when a user added a recipe to their meals, the database then thought the user created that recipe. Therefore, the user, whether that recipe was uploaded by them or not, had access to editing and deleting the recipe itself from the database. Because of this, the user could not just delete a meal from the meal plan without destroying the recipe in it’s entirety.

The solution I found for this came from the ActiveRecord documentation on polymorphic associations. In order for the database to differentiate when a recipe was being saved as a new recipe vs. a meal to each user, I changed one line in the user model. Instead of “has_many :recipes, through: :meals;” I added the line “has_many :meal_list, through: :meals, source: :recipe.” This method lets the database know of the polymorphic association (that a recipe can exist in two different forms), and essentially gives a meal a pseudonym for handling the recipes. This was a much easier fix than trying to change up my databases and their associations.

From there the backend portion of the app was basically finished. CSS has never been a strong suit of mine, and to be honest I still feel like I could clean up the divs, but every time I mess with it something breaks. No surprise there. Overall, I am happy with how the design came out for now. I can always come back and change it around once I have had more practice!

I also knew I wanted the ability to upload profile pictures and photos for recipes, so I googled around for how to do that in Rails. I found the documentation for carrierwave and mini_magick, and frankly I was surprised at how easy they were to get up and running. I really only ran into two issues with this functionality; when I wanted to upload images for my seedfile, and when I wanted to import a photo from facebook. Again, with a little googling, these were pretty simple fixes. Carrierwave has built in methods for dealing with remote URLs, and in order to upload photos to the seedfile it was just a matter of using “Rails.root.join” and opening the image location from within the asset pipeline.

Though it was the first thing I added, the last thing I was able to finish integrating was my OAuth. First it was a matter of differentiating between a facebook login/signup and a manual one in my sessions controller. Calling ‘if auth’ was enough to work, but the action soon became too crowded, so I created a separate sessions action exclusively for oauth users. Then came my last big error; my user model contains validations for the presence of a password. However, the authentication information coming through params does not contain a password. Since I am still quite new to OAuth, I couldn’t figure out how to debug the issue, so I set up a 1:1 with a tech coach. He came up with a pretty brilliant solution after we did some digging. I didn’t install Devise, so I didn’t have access to methods like ‘friendly tokens’ and the like. However, he suggested I mimic that functionality by passing a local key as a password. The perfect place to find one? The code sent through OAuth! So we set up the sessions action to set the user password to params[:code][0..71] (without the limitation we got an error about the length of the string). Bcrypt was then able to take the passcode and salt it, satisfying the user validations set up for both kinds of logins.

This was by far my favorite project so far. I feel like I was able to solve problems and debug errors in ways I never thought I could. I even felt like googling was easier; that I knew what to search for and how in order to fix my app. This project has boosted my confidence in my programming skills and given me the motivation to keep digging deeper into code. I’m looking forward to diving in to Javascript!

If you want to check out my app, check out this link (instructions are in the readme): https://github.com/KristenLeach/recipes-to-groceries
